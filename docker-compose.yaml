services:
  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafka-network
    volumes:
      - zookeeper-data:/bitnami/zookeeper

  kafka:
    image: bitnami/kafka:latest
    ports:
      - '9092:9092'
      - '29092:29092'
    restart: on-failure
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,EXTERNAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - kafka-network
    volumes:
      - kafka-data:/bitnami/kafka

  akhq:
    image: tchiotludo/akhq:latest
    ports:
      - '8080:8080'
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            kafka-cluster:
              properties:
                bootstrap.servers: "kafka:9092"
    depends_on:
      - kafka
    networks:
      - kafka-network

  cassandra:
    image: cassandra:3.11
    ports:
      - '9042:9042'
    environment:
      - CASSANDRA_CLUSTER_NAME=Learning Cluster
      - CASSANDRA_DC=dc1
      - CASSANDRA_RACK=rack1
      - CASSANDRA_LISTENER_INTERFACE=eth0
    volumes:
      - cassandra-data:/var/lib/cassandra
      - ./packages/shared/init-cassandra.cql:/docker-entrypoint-initdb.d/init-cassandra.cql
    networks:
      - kafka-network
    healthcheck:
      test: ['CMD', 'cqlsh', '-e', 'DESCRIBE KEYSPACES']
      interval: 10s
      retries: 5
      start_period: 30s
    # command:
    #   [
    #     '/bin/sh',
    #     '-c',
    #     "until cqlsh -e 'DESCRIBE KEYSPACES'; do sleep 5; done && cqlsh -f /docker-entrypoint-initdb.d/init-cassandra.cql",
    #   ]

  elasticsearch:
    image: bitnami/elasticsearch:latest
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xmx512m -Xms512m
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
    ports:
      - '9200:9200'
    networks:
      - kafka-network
    volumes:
      - es-data:/usr/share/elasticsearch/data

  # redis:
  #   image: redis:latest
  #   ports:
  #     - '6380:6380'
  #   networks:
  #     - kafka-network
  #   volumes:
  #     - redis-data:/data

  # redis-ui:
  #   image: rediscommander/redis-commander:latest
  #   ports:
  #     - '8001:8081'
  #   environment:
  #     - REDIS_HOSTS=local:redis:6380
  #   networks:
  #     - kafka-network
  kong-database:
    image: postgres:13
    container_name: kong-database
    networks:
      - kafka-network
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kongpass
    ports:
      - '5444:5432'
    volumes:
      - kong-db-data:/var/lib/postgresql/data

  kong-migrations:
    image: kong/kong-gateway:3.9.0.0
    container_name: kong-migrations
    networks:
      - kafka-network
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: kongpass
      KONG_PASSWORD: test
    command: kong migrations bootstrap
    depends_on:
      - kong-database
    restart: 'no' # Migrations chỉ chạy một lần

  kong-gateway:
    image: kong/kong-gateway:3.9.0.0
    container_name: kong-gateway
    networks:
      - kafka-network
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_ADMIN_GUI_URL: 'http://localhost:8002'
    ports:
      - '8000:8000' # Kong Proxy
      - '8443:8443' # Kong Proxy HTTPS
      - '8001:8001' # Kong Admin API
      - '8444:8444' # Kong Admin API HTTPS
      - '8002:8002' # Kong Manager GUI
      - '8445:8445'
      - '8003:8003'
      - '8004:8004'
    depends_on:
      - kong-migrations
    restart: always

  shared-library:
    build:
      context: .
      dockerfile: ./packages/shared/Dockerfile
    networks:
      - kafka-network
    volumes:
      - ./packages/shared:/cqrs-microservice/packages/shared
    command: ['tail', '-f', '/dev/null']

  kafka-library:
    build:
      context: .
      dockerfile: ./packages/kafka/Dockerfile
    networks:
      - kafka-network
    depends_on:
      - shared-library
    volumes:
      - ./packages/kafka:/cqrs-microservice/packages/kafka
      - ./packages/shared:/cqrs-microservice/packages/shared
    command: ['tail', '-f', '/dev/null']

  command-service:
    build:
      context: .
      dockerfile: ./app/command-service/Dockerfile
    container_name: command-service
    ports:
      - '3001:3001'
    networks:
      - kafka-network
    depends_on:
      shared-library:
        condition: service_started
      kafka-library:
        condition: service_started
      kafka:
        condition: service_started
      cassandra:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    volumes:
      - ./app/command-service:/cqrs-microservice/app/command-service
      - ./packages/shared:/cqrs-microservice/packages/shared
      - ./packages/kafka:/cqrs-microservice/packages/kafka
    environment:
      KAFKA_BROKER: kafka:9092
      CASSANDRA_HOST: cassandra
      CASSANDRA_DC: dc1
      ELASTICSEARCH_HOST: elasticsearch
    command: ['yarn', 'workspace', 'command-service', 'run', 'start']

  query-service:
    build:
      context: .
      dockerfile: ./app/query-service/Dockerfile
    container_name: query-service
    ports:
      - '3002:3002'
    networks:
      - kafka-network
    depends_on:
      shared-library:
        condition: service_started
      kafka-library:
        condition: service_started
      kafka:
        condition: service_started
      cassandra:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    volumes:
      - ./app/query-service:/cqrs-microservice/app/query-service
      - ./packages/shared:/cqrs-microservice/packages/shared
      - ./packages/kafka:/cqrs-microservice/packages/kafka
    environment:
      KAFKA_BROKER: kafka:9092
      CASSANDRA_HOST: cassandra
      CASSANDRA_DC: dc1
      ELASTICSEARCH_HOST: elasticsearch
    command: ['yarn', 'workspace', 'query-service', 'run', 'start']

volumes:
  zookeeper-data:
  kafka-data:
  cassandra-data:
  es-data:
  kong-db-data:
  shared-build:
  # redis-data:
  # redis-ui-data:

networks:
  kafka-network:
    driver: bridge
